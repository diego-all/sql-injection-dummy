name: DAST Pipeline Golang API

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build_and_scan:
    name: Build, Deploy and Run DAST
    runs-on: ubuntu-latest

    env:  # <- Aquí agregamos los secrets como variables de entorno
      POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
      POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
      POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
      DSN: ${{ secrets.DSN }}
      BINARY_NAME: ${{ secrets.BINARY_NAME }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install docker-compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.24.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose version

      - name: Build and Start containers
        run: |
          docker-compose up --build -d
          # Mejoramos la espera para que la API esté realmente lista
          echo "Waiting for API to be ready..."
          for i in $(seq 1 60); do # Intentamos por hasta 60 segundos (ajusta según sea necesario)
            # Usamos curl para verificar la conectividad con la API
            if curl -s http://localhost:9090 > /dev/null; then
              echo "API is ready!"
              break
            fi
            echo "API not ready yet, waiting 1 second..."
            sleep 1
          done
          # Verificamos si la API realmente se levantó, si no, fallamos el workflow
          if ! curl -s http://localhost:9090 > /dev/null; then
            echo "API did not become ready in time. Exiting."
            exit 1
          fi

      - name: Run OWASP ZAP Baseline Scan
        run: |
          # Ejecutamos el escaneo dentro del contenedor ZAP
          # El reporte se guardará en /zap/wrk/zap-report.html DENTRO del contenedor
          docker exec zap-scanner zap-baseline.py -t http://api:9090 -r /zap/wrk/zap-report.html -I || true
          # Copiamos el reporte del contenedor al workspace del runner
          docker cp zap-scanner:/zap/wrk/zap-report.html ./zap-report.html

      - name: Upload ZAP report
        uses: actions/upload-artifact@v4
        with:
          name: ZAP Report
          path: zap-report.html

      - name: Stop and Clean containers
        run: docker-compose down -v --rmi all
