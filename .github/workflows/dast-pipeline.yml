name: DAST Pipeline Golang API

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build_and_scan:
    name: Build, Deploy and Run DAST
    runs-on: ubuntu-latest

    env:
      POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
      POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
      POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
      DSN: ${{ secrets.DSN }}
      BINARY_NAME: ${{ secrets.BINARY_NAME }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install docker-compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.24.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose version

      - name: Build and Start containers
        run: |
          docker-compose up --build -d
          echo "Waiting for API to be ready..."
          # Aumentamos el tiempo de espera a 90 segundos para dar más margen
          for i in $(seq 1 90); do # Cambiado de 60 a 90 segundos
            if curl -s http://localhost:9090 > /dev/null; then
              echo "API is ready!"
              break
            fi
            echo "API not ready yet, waiting 1 second..."
            sleep 1
          done
          # Verificamos si la API realmente se levantó, si no, fallamos el workflow
          if ! curl -s http://localhost:9090 > /dev/null; then
            echo "API did not become ready in time. Exiting."
            # --- AGREGADO PARA DEPURACIÓN: MOSTRAR LOGS DEL CONTENEDOR DE LA API ---
            echo "--- Logs del contenedor golang_api_sqli ---"
            docker logs golang_api_sqli
            # --- FIN DE AGREGADO ---
            exit 1
          fi

  sonarcloud_scan:
    name: SonarCloud Scan
    runs-on: ubuntu-latest
    needs: build_and_scan

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Run SonarCloud analysis
        uses: SonarSource/sonarcloud-github-action@master
        with:
          organization: xast
          projectKey: xast_sql-injection
          token: ${{ secrets.SONAR_TOKEN }}
      - name: Stop and Clean containers
        # Aseguramos que el docker-compose down se ejecute incluso si SonarCloud falla
        if: always()
        run: docker-compose down -v --rmi all