version: '3.9'

services:
  # Start Postgres, and ensure that data is stored to a mounted volume

  # serviceName
  postgres_sqli:
    # Pending: Connect with Dockerfile
    # build:
    #  context: ./database
    #  dockerfile: ./database/Dockerfile

    # Assign the image or build the image on development process
    #image: 'diegoall1990/sqli-pg-db:0.0.1'
    image: 'diegoall1990/linux-sqli-pg-db:0.0.1'
    container_name: linux_postgres_sqli_dummy
    ports:
      - "5432:5432"
    restart: always

    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}

# Bad security practice
    # environment:
    #   NOMBRE=${NOMBRE}
    #   POSTGRES_USER: postgres
    #   POSTGRES_PASSWORD: password
    #   POSTGRES_DB: sqli
    volumes:
      #- ./db-data/postgres/:/var/lib/postgresql/data/
      - ./db-data/postgres/:/var/lib/postgresql/data/:rw

# Deployment artifacts
    deploy:
     mode: replicated
     replicas: 1

    # --- AGREGAR HEALTHCHECK PARA POSTGRES ---
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 10 # Intentar 10 veces (50 segundos en total)
      start_period: 30s # Darle a Postgres 30 segundos para iniciar antes de empezar a chequear
    # --- FIN HEALTHCHECK ---

  api_sqli:
    build:
      context: .
      dockerfile: ./cmd/api/Dockerfile
    container_name: golang_api_sqli_dummy
    ports:
      - "9090:9090"
    # --- MODIFICAR depends_on para esperar el healthcheck ---
    depends_on:
      postgres_sqli:
        condition: service_healthy # Esperar a que postgres_sqli esté marcado como 'healthy'
    # --- FIN MODIFICACIÓN ---
    environment:
      - DSN=${DSN}
      # - DSN=host=postgres_sqli port=5432 user=postgres password=password dbname=sqli sslmode=disable timezone=UTC connect_timeout=5